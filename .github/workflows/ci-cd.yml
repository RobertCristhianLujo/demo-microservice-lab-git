name: CI/CD - Microservicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab

jobs:
  ci:
    name: Integración continua (build y test)
    runs-on: ubuntu-latest

    steps:
      - name: Obtener código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        working-directory: app
        run: npm install

      - name: Ejecutar pruebas
        working-directory: app
        run: npm test

      - name: Login a Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # IMPORTANTE: Dockerfile está en la RAÍZ del repo
      - name: Construir imagen (latest)
        run: docker build -f Dockerfile -t $IMAGE_NAME:latest .

      - name: Publicar imagen (latest)
        run: docker push $IMAGE_NAME:latest

  cd:
    name: Entrega y despliegue en EC2
    runs-on: ubuntu-latest
    needs: [ci]
    # SOLO desplegar en push a main (no en PRs, donde no hay secrets)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: (Sanidad) Verificar que el SSH_PRIVATE_KEY esté presente
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "ERROR: SSH_PRIVATE_KEY está vacío o no existe"; exit 1;
          else
            echo "OK: SSH_PRIVATE_KEY presente";
          fi

      - name: Iniciar ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Registrar known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -T 10 -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Probar conexión SSH (publickey)
        run: |
          ssh -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes \
              ec2-user@"${{ secrets.EC2_HOST }}" 'whoami && uname -a'

      - name: Desplegar contenedor en EC2
        env:
          HOST:     ${{ secrets.EC2_HOST }}
          IMAGE:    ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab:latest
          APP_PORT: ${{ secrets.APP_PORT }}
        run: |
          # APP_PORT por defecto 3000 si viene vacío
          APP_PORT="${APP_PORT:-3000}"

          ssh -o IdentitiesOnly=no -o StrictHostKeyChecking=yes ec2-user@"$HOST" "IMAGE='$IMAGE' APP_PORT='$APP_PORT' bash -s" << 'EOF'
          set -euxo pipefail
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start docker || true
          else
            sudo service docker start || true
          fi

          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet
          docker ps -q --filter "name=demo-microservice-lab" | grep -q . && docker stop demo-microservice-lab || true
          docker ps -aq --filter "name=demo-microservice-lab" | grep -q . && docker rm demo-microservice-lab || true

          docker pull "$IMAGE"
          docker run -d --name demo-microservice-lab --restart unless-stopped \
            --network appnet -p 80:"$APP_PORT" "$IMAGE"
          EOF
