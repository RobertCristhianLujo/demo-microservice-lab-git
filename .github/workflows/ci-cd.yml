name: CI/CD - Microservicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}

jobs:
  ci:
    name: Integracion continua (build y test)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Obtener codigo
        uses: actions/checkout@v4

      - name: Configuracion Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar las pruebas
        run: npm test

      - name: Iniciar sesion en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Construir imagen (latest)
        run: docker build -t $IMAGE_NAME:latest .

      - name: Publicar la imagen (latest)
        run: docker push $IMAGE_NAME:latest

  cd:
    name: Entrega y despliegue en EC2
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
      - name: Instalar cliente SSH
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Configurar llave SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh
          sed -i 's/\r$//' ~/.ssh/id_rsa
          perl -0777 -pe 's/\\n/\n/g' -i ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          ssh-keyscan -T 10 -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Desplegar contenedor en EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab:latest
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes "$USER@$HOST" << 'EOF'
          set -euxo pipefail
          sudo systemctl start docker
          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet
          docker ps -q --filter "name=demo-microservice-lab" | grep -q . && docker stop demo-microservice-lab || true
          docker ps -aq --filter "name=demo-microservice-lab" | grep -q . && docker rm demo-microservice-lab || true
          docker pull $IMAGE
          # Si la app usa APP_PORT interno, mapear host:80->contenedor:$APP_PORT
          docker run -d --name demo-microservice-lab --restart unless-stopped \
            --network appnet -p 80:$APP_PORT $IMAGE
          EOF
